[
  {
    "model": "workflows.abstractwidget", 
    "fields": {
      "category": "1be7b5eb-c1b2-485a-8dbe-56abce63fc73", 
      "treeview_image": "", 
      "uid": "72a39fab-5433-493f-ae22-12a264075356", 
      "is_streaming": false, 
      "package": "big_data", 
      "interaction_view": "", 
      "has_progress_bar": false, 
      "image": "", 
      "description": "Weighted forest with MapReduce\r\n\r\nWeighted forest is a novel ensemble algorithm. \r\n\r\nFit phase\r\nWeighted forest algorithm builds multiple decision trees with a bootstrap method on a subset of data. In each tree node, it estimates sqrt(num. of attributes)+1 randomly selected attributes (without replacement). It uses decision tree to predict out-of-bag samples. For each prediction of an out-of-bag sample, it measures margin (classifier confidence in prediction) and leaf identifier that outputs prediction. Algorithm uses similarity matrix, where it stores similarities for each out-of-bag sample that was predicted with the same leaf. We assume that samples are similar, if the same leaf predicts them multiple times in multiple decision trees. \r\nAfter algorithm builds all decision trees, it passes similarity matrix to k-medoids algorithm. Similarity matrix presents distances between test samples. We set parameter k as sqrt(num. of attributes)+1. k-medoids algorithm outputs medoids, which are test samples in the cluster centers of the dataset. Medoids are actual samples in a dataset, unlike centroids which are centers of clusters. Algorithm measures average margin for all samples that are in the cluster of certain medoid. It saves the average margin of a decision tree in its model. Algorithm uses this scores as weights of decision trees in predict phase.\r\nAlgorithm builds a forest on each subset of the data and it merges them in large ensemble. Each forest has its own medoids.\r\n\r\nPredict phase \r\nAlgorithm selects a forest (or more, if it finds equal similarities with medoids in multiple forests), that contain most similar medoid with a test sample. Then it uses the same procedure like with small data. Algorithm calculates Gower similarity coefficient with a test sample and every medoid. Only decision trees with high margin on similar test samples output prediction and algorithm stores decision tree margin for each prediction. Algorithm calculates final values for each prediction: (number of margins) * avg(margins) and it selects prediction with highest value.", 
      "static_image": "", 
      "action": "wrf_fit", 
      "visualization_view": "", 
      "streaming_visualization_view": "", 
      "post_interact_action": "", 
      "wsdl_method": "", 
      "wsdl": "", 
      "interactive": false, 
      "windows_queue": false, 
      "order": 1, 
      "name": "Weighted forest"
    }
  }, 
  {
    "model": "workflows.abstractinput", 
    "fields": {
      "widget": "72a39fab-5433-493f-ae22-12a264075356", 
      "name": "Class majority", 
      "short_name": "csm", 
      "default": "1", 
      "description": "Purity of a subset.", 
      "required": true, 
      "multi": false, 
      "parameter_type": "text", 
      "variable": "majority", 
      "parameter": true, 
      "order": 6, 
      "uid": "1b23ead1-b104-4d27-a6fd-b23de6efa28f"
    }
  }, 
  {
    "model": "workflows.abstractinput", 
    "fields": {
      "widget": "72a39fab-5433-493f-ae22-12a264075356", 
      "name": "Random state", 
      "short_name": "rsd", 
      "default": "None", 
      "description": "Define a random state", 
      "required": true, 
      "multi": false, 
      "parameter_type": "text", 
      "variable": "seed", 
      "parameter": true, 
      "order": 9, 
      "uid": "31c68e34-3bff-41bb-bf77-925c6171a6f6"
    }
  }, 
  {
    "model": "workflows.abstractinput", 
    "fields": {
      "widget": "72a39fab-5433-493f-ae22-12a264075356", 
      "name": "Dataset", 
      "short_name": "dst", 
      "default": "", 
      "description": "", 
      "required": true, 
      "multi": false, 
      "parameter_type": null, 
      "variable": "dataset", 
      "parameter": false, 
      "order": 1, 
      "uid": "37879268-0aa9-4458-afb2-71a521acb299"
    }
  }, 
  {
    "model": "workflows.abstractinput", 
    "fields": {
      "widget": "72a39fab-5433-493f-ae22-12a264075356", 
      "name": "Max tree nodes", 
      "short_name": "mnt", 
      "default": "20", 
      "description": "Max. number of decision tree nodes", 
      "required": true, 
      "multi": false, 
      "parameter_type": "text", 
      "variable": "tree_nodes", 
      "parameter": true, 
      "order": 4, 
      "uid": "3d48b0d0-a304-45d5-9d18-3ca17e8fcf05"
    }
  }, 
  {
    "model": "workflows.abstractinput", 
    "fields": {
      "widget": "72a39fab-5433-493f-ae22-12a264075356", 
      "name": "Trees per subset", 
      "short_name": "tps", 
      "default": "20", 
      "description": "Number of trees per subset of data", 
      "required": true, 
      "multi": false, 
      "parameter_type": "text", 
      "variable": "trees_per_subset", 
      "parameter": true, 
      "order": 3, 
      "uid": "8770ace6-4968-47cf-b7cc-4ad8bfff303c"
    }
  }, 
  {
    "model": "workflows.abstractinput", 
    "fields": {
      "widget": "72a39fab-5433-493f-ae22-12a264075356", 
      "name": "Measure", 
      "short_name": "msr", 
      "default": "info_gain", 
      "description": "Select measure for estimation of attributes.", 
      "required": true, 
      "multi": false, 
      "parameter_type": "select", 
      "variable": "measure", 
      "parameter": true, 
      "order": 7, 
      "uid": "9a8f3c2c-265c-4b37-93c1-d58fee9dd7af"
    }
  }, 
  {
    "model": "workflows.abstractinput", 
    "fields": {
      "widget": "72a39fab-5433-493f-ae22-12a264075356", 
      "name": "Min samples split", 
      "short_name": "lmi", 
      "default": "5", 
      "description": "Min. number of samples to split the node", 
      "required": true, 
      "multi": false, 
      "parameter_type": "text", 
      "variable": "leaf_min_inst", 
      "parameter": true, 
      "order": 5, 
      "uid": "ac032f38-f4a4-44ea-8c02-96506d4f8e86"
    }
  }, 
  {
    "model": "workflows.abstractinput", 
    "fields": {
      "widget": "72a39fab-5433-493f-ae22-12a264075356", 
      "name": "Discretization", 
      "short_name": "spf", 
      "default": "equal_freq", 
      "description": "Select equal frequency discretization or random discretization for numeric attributes", 
      "required": true, 
      "multi": false, 
      "parameter_type": "select", 
      "variable": "split_fun", 
      "parameter": true, 
      "order": 8, 
      "uid": "c43bfc92-e1af-42fc-8d73-f7348ebdaf40"
    }
  }, 
  {
    "model": "workflows.abstractoutput", 
    "fields": {
      "widget": "72a39fab-5433-493f-ae22-12a264075356", 
      "name": "Fit model", 
      "short_name": "fit", 
      "description": "Fit model URL", 
      "variable": "fitmodel_url", 
      "order": 1, 
      "uid": "a862dff5-a324-4d45-977c-abda633714c3"
    }
  }, 
  {
    "model": "workflows.abstractoption", 
    "fields": {
      "name": "Minimum description length", 
      "uid": "293fb2f7-de3f-4133-8e3a-22701245c55d", 
      "value": "mdl", 
      "abstract_input": "9a8f3c2c-265c-4b37-93c1-d58fee9dd7af"
    }
  }, 
  {
    "model": "workflows.abstractoption", 
    "fields": {
      "name": "Information gain", 
      "uid": "364fbb94-f200-4acc-a801-d29339f0d4c5", 
      "value": "info_gain", 
      "abstract_input": "9a8f3c2c-265c-4b37-93c1-d58fee9dd7af"
    }
  }, 
  {
    "model": "workflows.abstractoption", 
    "fields": {
      "name": "Equal frequency discretization", 
      "uid": "4ea5c55a-92a8-4541-a1cc-9aabb0fd82c0", 
      "value": "equal_freq", 
      "abstract_input": "c43bfc92-e1af-42fc-8d73-f7348ebdaf40"
    }
  }, 
  {
    "model": "workflows.abstractoption", 
    "fields": {
      "name": "Random discretization", 
      "uid": "838f798d-e00e-4216-8990-ebc3c1929c0e", 
      "value": "random", 
      "abstract_input": "c43bfc92-e1af-42fc-8d73-f7348ebdaf40"
    }
  }
]